function EditingWeight(e) {
  var sheet = e.source.getActiveSheet();
  
  // Check if the active sheet is "WeightData"
  if (sheet.getName() === "WeightData") {
    var range = e.range;

    // Check if the edited cell is in the Weight column (D) and is not empty
    if (range.getColumn() == 4 && range.getRow() > 1 && range.getValue() !== "") {
      var weight = range.getValue();
      
      // Record date information in the same row
      var date = new Date();
      sheet.getRange(range.getRow(), 1).setValue(date.getFullYear()); // Year
      
      var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      sheet.getRange(range.getRow(), 2).setValue(monthNames[date.getMonth()]); // Month (in mmm format)
      
      var formattedDate = Utilities.formatDate(date, Session.getScriptTimeZone(), "MM/dd/yy");
      sheet.getRange(range.getRow(), 3).setValue(formattedDate); // Date
      
      // Set the weight value (already in the edited cell)
      sheet.getRange(range.getRow(), 4).setValue(weight); // Weight

      // Copy the SUM formula from the row above to the new row in column I
      var newRow = range.getRow();
      var previousRow = newRow - 1;

      // Create the SUM formula for the new row
      var sumFormula = '=SUM(E' + newRow + ':H' + newRow + ')';
      sheet.getRange(newRow, 9).setFormula(sumFormula); // Set the SUM formula in column I of the new row

      // Set all entries in the row to align right
      sheet.getRange(range.getRow(), 1, 1, 4).setHorizontalAlignment("right");

      // Calculate the calorie surplus or deficit, BMR 1975, Sedentary 2358 SRC https://www.calculator.net/calorie-calculator.html
      var RequiredCalorie = 2358; // Basal Metabolic Rate
      var calorieSurplusDeficitFormula = '=' + sheet.getRange(newRow, 9).getA1Notation() + ' - ' + RequiredCalorie;
      sheet.getRange(newRow, 10).setFormula(calorieSurplusDeficitFormula); // Set the formula in the Calorie Â± column (Column J)

      // Dynamically copy formulas from the previous row (K and beyond)
      var lastColumn = sheet.getLastColumn(); // Find the last column with data
      for (var col = 11; col <= lastColumn; col++) { // Start from column K (11) to the last column
        var prevFormula = sheet.getRange(previousRow, col).getFormula();
        if (prevFormula) {
          // Adjust only the row number in the formula for the new row
          var adjustedFormula = prevFormula.replace(/(\$?[A-Z]+\$?)(\d+)/g, function(match, colLetter, rowNumber) {
            return colLetter + (parseInt(rowNumber) + 1);
          });
          sheet.getRange(newRow, col).setFormula(adjustedFormula); // Set the adjusted formula to the new row
          if (col == 11 || col == 14 || col == 15 || col == 16) { // Columns K, N, O, P
            sheet.getRange(newRow, col).setNumberFormat('0.00');
          }
        }
      }
    }
  }
}

function workoutRecord(e) {
    var sheet = e.source.getActiveSheet();
    
    // Check if the active sheet is "Workout"
    if (sheet.getName() === "Workout") {
      
      // Get the value from O1
      var action = sheet.getRange("O1").getValue();
      
      // Check if O1 is set to "Start"
      if (action == "Start") {
        
        var range = e.range;
        var editedColumn = range.getColumn();
        var editedRow = range.getRow();
        
        // Check if the edited cell is within column D (column 4) and from row 2 onwards
        if (editedColumn == 4 && editedRow >= 2) {
          
          if (range.getValue() !== "") {
            // If there's a value, set the date (without time) in the corresponding row in column A
            var currentDate = new Date();
            sheet.getRange(editedRow, 1).setValue(Utilities.formatDate(currentDate, Session.getScriptTimeZone(), "MM/dd/yyyy"));
          } else {
            // If the cell is cleared, delete the date in the corresponding row in column A
            sheet.getRange(editedRow, 1).clearContent();
          }
        }
      }
      
      // Check if O1 is set to "Finish"
      if (action == "Finish") {
        
        var dataSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("WorkoutLog"); // Your storage sheet name
        var lastRow = dataSheet.getLastRow(); // Find the last row in the WorkoutLog
        
        // Get the range of rows with a date in column A
        var workoutData = sheet.getRange("A2:O" + sheet.getLastRow()).getValues(); // Adjust range as needed
        var rowsToCopy = [];
        
        for (var i = 0; i < workoutData.length; i++) {
          if (workoutData[i][0] !== "") { // Check if there's a date in column A
            workoutData[i][0] = Utilities.formatDate(new Date(workoutData[i][0]), Session.getScriptTimeZone(), "MM/dd/yyyy");
            rowsToCopy.push(workoutData[i]);
          }
        }
        
        if (rowsToCopy.length > 0) {
          dataSheet.getRange(lastRow + 1, 1, rowsToCopy.length, rowsToCopy[0].length).setValues(rowsToCopy);
        }
        
        // Clear the dates and data in columns D to J for the next input
        sheet.getRange("A2:A" + sheet.getLastRow()).clearContent(); // Clear dates in column A
        sheet.getRange("D2:J" + sheet.getLastRow()).clearContent(); // Clear data in columns D to J
        
        // Set O1 to "NA"
        sheet.getRange("O1").setValue("NA");
      }
    }
  }

  function LogToWeightData(e) {
    var sheet = e.source.getActiveSheet();
  
    // Check if the edited sheet is "WorkoutLog"
    if (sheet.getName() !== "WorkoutLog") {
      return; // Exit if not editing the WorkoutLog sheet
    }
  
    var ss = SpreadsheetApp.getActiveSpreadsheet();
    var workoutLogSheet = ss.getSheetByName("WorkoutLog");
    var weightDataSheet = ss.getSheetByName("WeightData");
  
    // Get today's date (formatted as MM/dd/yyyy)
    var today = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), "MM/dd/yyyy");
  
    // Get all rows in WorkoutLog that match today's date
    var workoutData = workoutLogSheet.getRange("A2:J" + workoutLogSheet.getLastRow()).getValues();
    var totalTime = 0;
    var categorySet = new Set(); // To keep track of unique categories
    var hasData = false;
  
    for (var i = 0; i < workoutData.length; i++) {
      var workoutDate = Utilities.formatDate(new Date(workoutData[i][0]), Session.getScriptTimeZone(), "MM/dd/yyyy");
      
      if (workoutDate === today) {
        totalTime += workoutData[i][9]; // Assuming Time is in column J (index 9)
        categorySet.add(workoutData[i][1]); // Add category to the set (index 1 is category, which is column B)
        hasData = true; // Set flag to true when data for today is found
      }
    }
  
    // Determine the workout category to set in WeightData
    var workoutCategory = "Weightlifting"; // Default to Weightlifting
    var metValue = 6; // Default MET value for Weightlifting
    if (categorySet.has("Running")) {
      metValue = 8; // MET value for Running 8.3 - 8km/h, 8.8 - 9km/h, 11.2 - 11km/h, 11.8 - 12.9km/h, General Jogging - 7
      workoutCategory = "Running";
    } else if (categorySet.has("Basketball")) {
      workoutCategory = "Basketball";
      metValue = 8; // MET value for Basketball
    }
  
    // Find the corresponding row in WeightData based on today's date
    var weightDataRange = weightDataSheet.getRange("C2:C" + weightDataSheet.getLastRow());
    var weightDataValues = weightDataRange.getValues();
  
    for (var i = 0; i < weightDataValues.length; i++) {
      var weightDate = Utilities.formatDate(new Date(weightDataValues[i][0]), Session.getScriptTimeZone(), "MM/dd/yyyy");
      
      if (weightDate === today) {
        if (hasData) {
          // Update the Workout Time in column K
          weightDataSheet.getRange(i + 2, 11).setValue(totalTime); // K is the 11th column
  
          // Update the Workout Category in column L
          weightDataSheet.getRange(i + 2, 12).setValue(workoutCategory); // L is the 12th column
  
          // Calculate and update the Workout Calories in column M, multiply by -1 to make it negative
          var weight = weightDataSheet.getRange(i + 2, 4).getValue(); // Assuming column D is weight
          var workoutCalories = metValue * weight * (totalTime / 60) * -1; // Multiply by -1 to make it negative
          weightDataSheet.getRange(i + 2, 13).setValue(workoutCalories.toFixed(2)); // M is the 13th column
        } else {
          // Clear the values in columns K, L, and M if no workout data is found for today
          weightDataSheet.getRange(i + 2, 11, 1, 3).clearContent();
        }
        break; // Break once the correct date row is found and updated
      }
    }
  }
  